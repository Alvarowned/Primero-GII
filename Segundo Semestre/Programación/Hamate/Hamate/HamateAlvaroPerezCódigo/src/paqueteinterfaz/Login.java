/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paqueteinterfaz;

import hamatealvaroperez.*;
import java.io.*;
import java.awt.HeadlessException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.HashMap;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 * Esta clase ejecuta una ventana de Login, en la cual el jugador usuario puede introducir sus datos personales y preferencias en cuanto al juego (color y dificultad).
 * @author Álvaro Pérez Álamo
 */
public class Login extends javax.swing.JFrame {
    Scanner entrada = new Scanner(System.in);
    JugadorUsuario jugU;
    JugadorMaquina jugM;
    
    /**
     * Este constructor de Login crea una nueva ventana de login.
     */
    public Login() {
        super("LoginHamate");
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupColor = new javax.swing.ButtonGroup();
        buttonGroupDificultad = new javax.swing.ButtonGroup();
        jTextFieldNombre = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldApell = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jRadioButtonRojo = new javax.swing.JRadioButton();
        jRadioButtonAzul = new javax.swing.JRadioButton();
        jButtonContinuar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jRadioButtonFacil = new javax.swing.JRadioButton();
        jRadioButtonAvanz = new javax.swing.JRadioButton();
        jFormattedTextFieldFecha = new javax.swing.JFormattedTextField();
        jFormattedTextFieldDNI = new javax.swing.JFormattedTextField();
        jButtonAtras = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jTextFieldNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNombreActionPerformed(evt);
            }
        });

        jLabel1.setText("Nombre:");

        jLabel2.setFont(new java.awt.Font("Sylfaen", 1, 15)); // NOI18N
        jLabel2.setText("HAMATE: Datos del jugador");

        jLabel3.setText("Fecha de nacimiento:");

        jLabel4.setText("DNI:");

        jLabel5.setText("Apellidos:");

        jLabel6.setText("Color:");

        buttonGroupColor.add(jRadioButtonRojo);
        jRadioButtonRojo.setText("Rojo");
        jRadioButtonRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonRojoActionPerformed(evt);
            }
        });

        buttonGroupColor.add(jRadioButtonAzul);
        jRadioButtonAzul.setText("Azul");

        jButtonContinuar.setText("OK");
        jButtonContinuar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonContinuarActionPerformed(evt);
            }
        });

        jLabel7.setText("(dd/mm/yyyy)");

        jLabel8.setText("Dificultad:");

        buttonGroupDificultad.add(jRadioButtonFacil);
        jRadioButtonFacil.setText("Fácil");

        buttonGroupDificultad.add(jRadioButtonAvanz);
        jRadioButtonAvanz.setText("Avanzado");

        jFormattedTextFieldFecha.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        jFormattedTextFieldFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextFieldFechaActionPerformed(evt);
            }
        });

        try {
            jFormattedTextFieldDNI.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("########-U")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jButtonAtras.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonAtras.setText("<--");
        jButtonAtras.setMaximumSize(new java.awt.Dimension(51, 19));
        jButtonAtras.setMinimumSize(new java.awt.Dimension(51, 19));
        jButtonAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtrasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(34, 34, 34)
                                            .addComponent(jLabel7)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(56, 56, 56)
                                        .addComponent(jLabel5)))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jTextFieldApell, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                                        .addComponent(jFormattedTextFieldFecha))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jRadioButtonRojo)
                                        .addGap(18, 18, 18)
                                        .addComponent(jRadioButtonAzul))
                                    .addComponent(jFormattedTextFieldDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jRadioButtonFacil)
                                        .addGap(18, 18, 18)
                                        .addComponent(jRadioButtonAvanz))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButtonAtras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(71, 71, 71)
                                .addComponent(jButtonContinuar)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextFieldApell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jFormattedTextFieldFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel4))
                            .addComponent(jFormattedTextFieldDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButtonAzul))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(jRadioButtonRojo))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButtonAvanz)
                            .addComponent(jRadioButtonFacil)
                            .addComponent(jLabel8))
                        .addGap(21, 21, 21)
                        .addComponent(jButtonContinuar))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAtras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Este método no se usa.
     * @param evt No usar.
     */
    private void jTextFieldNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNombreActionPerformed
        
    }//GEN-LAST:event_jTextFieldNombreActionPerformed
    
    /**
     * Este método no se usa.
     * @param evt No usar.
     */
    private void jRadioButtonRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonRojoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonRojoActionPerformed
    
    /**
     * Este método (que se ejecuta al pulsar el botón jButtonContinuar) controla que todos los datos estén introducidos correctamente (nombre, apellidos, fecha de nacimiento, DNI, color y dificultad). Si no lo están abre mensajes de aviso para saber qué no se ha introducido bien. Si se han introducido correctamente, ejecuta una nueva forma de Juego, que abre la ventana Juego.
     * @param evt 
     */
    private void jButtonContinuarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonContinuarActionPerformed
        String nombre = "", apell = "", dni = "";
        DateTimeFormatter df = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDate fecha_nac = LocalDate.parse("01/01/1111", df);
        boolean rojo = false, dificil = false, exist_excep = false;
        
        /* Control de nombre no introducido */
        try {
            nombre = jTextFieldNombre.getText();
            if("".equals(nombre)) throw new JugadorException("Casilla de nombre en blanco.");
        } catch(JugadorException ex) {
            JOptionPane.showMessageDialog(this,"Error: " + ex.NOMBRE_NO_EXISTE, "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        }
        
        /* Control de apellidos no introducidos */
        try {
            apell = jTextFieldApell.getText();
            if("".equals(apell)) throw new JugadorException();
        } catch(JugadorException ex){
            JOptionPane.showMessageDialog(this, "Error: " + ex.APELLIDO_NO_EXISTE, "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        }

        /* Control de fecha de nacimiento no introducida, o no introducida correctamente */
        try {
            LocalDate temp = fecha_nac;
            fecha_nac = LocalDate.parse(jFormattedTextFieldFecha.getText(), df);
            if(temp.equals(fecha_nac)) throw new JugadorException();
        } catch(DateTimeParseException ex){
            JOptionPane.showMessageDialog(this, "Error: Fecha no introducida correctamente.", "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        } catch(JugadorException ex){
            JOptionPane.showMessageDialog(this, "Error: " + ex.FECHA_NO_INTRODUCIDA, "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        }
        
        /* Control de fecha válida (anterior al día de hoy) */
        try {
            if(LocalDate.now().getYear() - fecha_nac.getYear() == 0){
                if(LocalDate.now().getMonthValue() == fecha_nac.getMonthValue()){
                    if(LocalDate.now().getDayOfMonth() < fecha_nac.getDayOfMonth()) throw new JugadorException();
                } else if(LocalDate.now().getMonthValue() < fecha_nac.getMonthValue()) throw new JugadorException();
            } else if(LocalDate.now().getYear() - fecha_nac.getYear() < 0) throw new JugadorException();
        } catch (JugadorException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.FECHA_INCORRECTA, "ERROR", JOptionPane.WARNING_MESSAGE);
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        }
        
        /* Control de mayoría de edad */
        try {
            if(LocalDate.now().getYear() - fecha_nac.getYear() == 18){
                if(LocalDate.now().getMonthValue() == fecha_nac.getMonthValue()){
                    if(LocalDate.now().getDayOfMonth() < fecha_nac.getDayOfMonth()) throw new JugadorException();
                } else if(LocalDate.now().getMonthValue() < fecha_nac.getMonthValue()) throw new JugadorException();
            } else if(LocalDate.now().getYear() - fecha_nac.getYear() < 18) throw new JugadorException();
        } catch (JugadorException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.EDAD_INCORRECTA, "ERROR", JOptionPane.WARNING_MESSAGE);
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        }

        /* Control de DNI no introducido y que la letra coincida con el número */
        try {
            dni = jFormattedTextFieldDNI.getText();
            if("        - ".equals(dni)) throw new JugadorException();
            try {
                String[] arr = dni.split("-");
                int num = Integer.parseInt(arr[0]);
                String letra = arr[1];
                switch(num % 23) {
                    case 0:
                        if(!"T".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 1:
                        if(!"R".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 2:
                        if(!"W".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 3:
                        if(!"A".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 4:
                        if(!"G".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 5:
                        if(!"M".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 6:
                        if(!"Y".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 7:
                        if(!"F".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 8:
                        if(!"P".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 9:
                        if(!"D".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 10:
                        if(!"X".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 11:
                        if(!"B".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 12:
                        if(!"N".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 13:
                        if(!"J".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 14:
                        if(!"Z".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 15:
                        if(!"S".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 16:
                        if(!"Q".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 17:
                        if(!"V".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 18:
                        if(!"H".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 19:
                        if(!"L".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 20:
                        if(!"C".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 21:
                        if(!"K".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 22:
                        if(!"E".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                }
            } catch(JugadorException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.NIF_INCORRECTO, "ERROR", JOptionPane.WARNING_MESSAGE);
                exist_excep = true;
            } catch(Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
                exist_excep = true;
            }
        } catch(JugadorException ex) {
            JOptionPane.showMessageDialog(this,"Error: " + ex.NIF_NO_INTRODUCIDO, "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        } catch(HeadlessException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        }

        /* Control de color no seleccionado */
        try {
            rojo = jRadioButtonRojo.isSelected();
            if(rojo == jRadioButtonAzul.isSelected()) throw new JugadorException();
        } catch(JugadorException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.COLOR_NO_SELECCIONADO, "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        }

        /* Control de dificultad no seleccionada */
        try {
            dificil = jRadioButtonAvanz.isSelected();
            if(dificil == jRadioButtonFacil.isSelected()) throw new JugadorException();
        } catch(JugadorException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.DIFICULTAD_NO_SELECCIONADA, "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        }
        
        /* Se ejecuta si no ha habido ninguna excepción, crea un JugadorUsuario y un JugadorMaquina y se lo pasa a un nuevo JFrame Juego */
        if(!exist_excep){
            MazoDeCartas mazo = new MazoDeCartas();
            jugU = new JugadorUsuario(rojo, mazo, nombre, apell, dni, fecha_nac);
            jugM = new JugadorMaquina(!rojo, mazo, dificil);
            jugU.setRival(jugM);
            
            try {
                FileInputStream fisRan = new FileInputStream("./src/paqueteinterfaz/ranking.ser");
                ObjectInputStream oisRan = new ObjectInputStream(fisRan);
                Ranking rank = (Ranking) oisRan.readObject();
                oisRan.close();
                fisRan.close();
                
                HashMap<String, JugadorUsuario> rankMap = rank.getRank();
                
                if(rankMap.containsKey(dni)) {
                    if(JOptionPane.showConfirmDialog(this, "Ya está registrado. ¿Quiere sobre-escribir sus datos?", "SOBRE-ESCRIBIR DATOS", JOptionPane.YES_NO_OPTION) == 0) {
                        rankMap.put(dni, jugU);
                        
                        FileOutputStream fosRan = new FileOutputStream("./src/paqueteinterfaz/ranking.ser");
                        ObjectOutputStream oosRan = new ObjectOutputStream(fosRan);
                        oosRan.writeObject(rank);
                        oosRan.close();
                        fosRan.close();
                        
                        Juego juego = new Juego(jugU, jugM);
                        juego.setVisible(true);
                        
                        dispose();
                    }
                } else {
                    FileOutputStream fosRan = new FileOutputStream("./src/paqueteinterfaz/ranking.ser");
                    ObjectOutputStream oosRan = new ObjectOutputStream(fosRan);
                    oosRan.writeObject(rank);
                    oosRan.close();
                    fosRan.close();
                    
                    Juego juego = new Juego(jugU, jugM);
                    juego.setVisible(true);

                    dispose();
                }
            } catch(EOFException ex) {
                HashMap<String, JugadorUsuario> rankMap = new HashMap<>();     // Haz un ArrayList con los datos de jugU y guarda ese Array en el HashMap en vez de el tipo JugadorUsuario
                rankMap.put(dni, jugU);
                Ranking rank = new Ranking(rankMap);
                try {
                    FileOutputStream fosRan = new FileOutputStream("./src/paqueteinterfaz/ranking.ser");
                    ObjectOutputStream oosRan = new ObjectOutputStream(fosRan);
                    oosRan.writeObject(rank);
                    oosRan.close();
                    fosRan.close();
                    
                    Juego juego = new Juego(jugU, jugM);
                    juego.setVisible(true);

                    dispose();          
                } catch(Exception ex1) {
                    JOptionPane.showMessageDialog(this, "Error: " + ex1.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
                }
            } catch(Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonContinuarActionPerformed

    /**
     * Este método no se usa.
     * @param evt No usar.
     */
    private void jFormattedTextFieldFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextFieldFechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFormattedTextFieldFechaActionPerformed

    /**
     * Este método sucede cuando el usuario pulsa el botón de atrás, y lo que hace es abrir una nueva ventana de Inicio.
     * @param evt 
     */
    private void jButtonAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtrasActionPerformed
        Inicio init = new Inicio();
        init.setVisible(true);
        
        dispose();
    }//GEN-LAST:event_jButtonAtrasActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupColor;
    private javax.swing.ButtonGroup buttonGroupDificultad;
    private javax.swing.JButton jButtonAtras;
    private javax.swing.JButton jButtonContinuar;
    private javax.swing.JFormattedTextField jFormattedTextFieldDNI;
    private javax.swing.JFormattedTextField jFormattedTextFieldFecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JRadioButton jRadioButtonAvanz;
    private javax.swing.JRadioButton jRadioButtonAzul;
    private javax.swing.JRadioButton jRadioButtonFacil;
    private javax.swing.JRadioButton jRadioButtonRojo;
    private javax.swing.JTextField jTextFieldApell;
    private javax.swing.JTextField jTextFieldNombre;
    // End of variables declaration//GEN-END:variables
}
