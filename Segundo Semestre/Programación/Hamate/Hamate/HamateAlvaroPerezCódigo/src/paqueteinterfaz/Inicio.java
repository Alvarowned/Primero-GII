package paqueteinterfaz;

import hamatealvaroperez.*;
import java.awt.HeadlessException;
import java.io.*;
import java.util.HashMap;
import javax.swing.JOptionPane;

/**
 * Esta clase ejecuta una ventana de Inicio, en la cual el usuario puede empezar una partida si ya está registrado, o abrir una ventana de Login para registrarse y jugar.
 * @author Álvaro Pérez Álamo
 */
public class Inicio extends javax.swing.JFrame {

    /**
     * Creates new form Inicio
     */
    public Inicio() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupColor = new javax.swing.ButtonGroup();
        buttonGroupDificil = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jFormattedTextFieldDNI = new javax.swing.JFormattedTextField();
        jButtonRegistro = new javax.swing.JButton();
        jButtonRanking = new javax.swing.JButton();
        jButtonEmpezada = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jRadioButtonFacil = new javax.swing.JRadioButton();
        jRadioButtonAvanz = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jRadioButtonRojo = new javax.swing.JRadioButton();
        jRadioButtonAzul = new javax.swing.JRadioButton();
        jButtonNueva = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel2.setFont(new java.awt.Font("Sylfaen", 1, 15)); // NOI18N
        jLabel2.setText("HAMATE: El juego de cartas");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("- Si ya estás registrado introduce tu DNI:");

        try {
            jFormattedTextFieldDNI.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("########-U")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jButtonRegistro.setText("Si aun no estás registrado, haz click aquí.");
        jButtonRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegistroActionPerformed(evt);
            }
        });

        jButtonRanking.setText("RANKING");
        jButtonRanking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRankingActionPerformed(evt);
            }
        });

        jButtonEmpezada.setText("Partida empezada");
        jButtonEmpezada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEmpezadaActionPerformed(evt);
            }
        });

        jLabel8.setText("Dificultad:");

        buttonGroupDificil.add(jRadioButtonFacil);
        jRadioButtonFacil.setText("Fácil");

        buttonGroupDificil.add(jRadioButtonAvanz);
        jRadioButtonAvanz.setText("Avanzado");

        jLabel6.setText("Color:");

        buttonGroupColor.add(jRadioButtonRojo);
        jRadioButtonRojo.setText("Rojo");
        jRadioButtonRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonRojoActionPerformed(evt);
            }
        });

        buttonGroupColor.add(jRadioButtonAzul);
        jRadioButtonAzul.setText("Azul");

        jButtonNueva.setText("Partida nueva");
        jButtonNueva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuevaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jRadioButtonRojo)
                                        .addGap(18, 18, 18)
                                        .addComponent(jRadioButtonAzul))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jRadioButtonFacil)
                                        .addGap(18, 18, 18)
                                        .addComponent(jRadioButtonAvanz)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonNueva))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jFormattedTextFieldDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonEmpezada))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jButtonRegistro)))
                .addGap(36, 36, 36))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jButtonRanking)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFormattedTextFieldDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonEmpezada))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jRadioButtonRojo)
                    .addComponent(jRadioButtonAzul))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonAvanz)
                    .addComponent(jRadioButtonFacil)
                    .addComponent(jLabel8)
                    .addComponent(jButtonNueva))
                .addGap(18, 18, 18)
                .addComponent(jButtonRegistro)
                .addGap(54, 54, 54)
                .addComponent(jButtonRanking)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Este método sucede cuando el usuario da en el botón partida empezada, y lo que hace es retomar una partida ya empezada del jugador elegido (ya registrado anteriormente). En caso de no haber partida empezada, lo notifica.
     * @param evt 
     */
    private void jButtonEmpezadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEmpezadaActionPerformed
        /* Control de DNI no introducido y que la letra coincida con el número */
        try {
            String dni = jFormattedTextFieldDNI.getText();
            if("        - ".equals(dni)) throw new JugadorException();
            try {
                String[] arr = dni.split("-");
                int num = Integer.parseInt(arr[0]);
                String letra = arr[1];
                switch(num % 23) {
                    case 0:
                        if(!"T".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 1:
                        if(!"R".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 2:
                        if(!"W".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 3:
                        if(!"A".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 4:
                        if(!"G".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 5:
                        if(!"M".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 6:
                        if(!"Y".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 7:
                        if(!"F".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 8:
                        if(!"P".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 9:
                        if(!"D".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 10:
                        if(!"X".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 11:
                        if(!"B".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 12:
                        if(!"N".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 13:
                        if(!"J".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 14:
                        if(!"Z".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 15:
                        if(!"S".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 16:
                        if(!"Q".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 17:
                        if(!"V".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 18:
                        if(!"H".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 19:
                        if(!"L".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 20:
                        if(!"C".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 21:
                        if(!"K".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 22:
                        if(!"E".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                }

                try {
                    FileInputStream fisRan = new FileInputStream("./src/paqueteinterfaz/ranking.ser");
                    ObjectInputStream oisRan = new ObjectInputStream(fisRan);
                    Ranking rank = (Ranking) oisRan.readObject();
                    oisRan.close();
                    fisRan.close();
                    
                    HashMap<String, JugadorUsuario> rankMap = rank.getRank();
                    
                    if(rankMap.containsKey(dni)) {
                        JugadorUsuario jug1 = rankMap.get(dni);
                        
                        FileOutputStream fosRan = new FileOutputStream("./src/paqueteinterfaz/ranking.ser");
                        ObjectOutputStream oosRan = new ObjectOutputStream(fosRan);
                        oosRan.writeObject(rank);
                        oosRan.close();
                        fosRan.close();
                        
                        if(jug1.getRival() != null) {
                            Juego juego = new Juego(jug1, jug1.getRival());
                            juego.setVisible(true);
                            dispose();
                        } else {
                            JOptionPane.showMessageDialog(this, "Error: No tiene partida empezada.", "ERROR", JOptionPane.WARNING_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Error: No está registrado.", "ERROR", JOptionPane.WARNING_MESSAGE);    // Si no está en rankMap
                    }
                } catch(EOFException ex) { 
                    JOptionPane.showMessageDialog(this, "Error: No está registrado.", "ERROR", JOptionPane.WARNING_MESSAGE);  // Si pasa esto es porque no hay ningún dato en rank
                } catch(Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error: " + ex.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
                }
            } catch(JugadorException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.NIF_INCORRECTO, "ERROR", JOptionPane.WARNING_MESSAGE);
            } catch(Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
            }
        } catch(JugadorException ex) {
            JOptionPane.showMessageDialog(this,"Error: " + ex.NIF_NO_INTRODUCIDO, "ERROR", JOptionPane.WARNING_MESSAGE);
        } catch(HeadlessException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonEmpezadaActionPerformed

    /**
     * Este método sucede cuando el usuario pulsa el botón registro, y abre una nueva ventana de Login.
     * @param evt 
     */
    private void jButtonRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegistroActionPerformed
        Login log = new Login();
        log.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButtonRegistroActionPerformed

    /**
     * Este método sucede cuando el usuario pulsa el botón de nueva partida, y crea una nueva partida a partir de un jugador ya registrado, de un color, y de una dificultad.
     * @param evt 
     */
    private void jButtonNuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuevaActionPerformed
        boolean rojo = false, dificil = false, exist_excep = false;
        String dni = "        - ";
        
        
        /* Control de DNI no introducido y que la letra coincida con el número */
        try {
            dni = jFormattedTextFieldDNI.getText();
            if("        - ".equals(dni)) throw new JugadorException();
            try {
                String[] arr = dni.split("-");
                int num = Integer.parseInt(arr[0]);
                String letra = arr[1];
                switch(num % 23) {
                    case 0:
                        if(!"T".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 1:
                        if(!"R".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 2:
                        if(!"W".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 3:
                        if(!"A".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 4:
                        if(!"G".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 5:
                        if(!"M".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 6:
                        if(!"Y".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 7:
                        if(!"F".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 8:
                        if(!"P".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 9:
                        if(!"D".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 10:
                        if(!"X".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 11:
                        if(!"B".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 12:
                        if(!"N".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 13:
                        if(!"J".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 14:
                        if(!"Z".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 15:
                        if(!"S".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 16:
                        if(!"Q".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 17:
                        if(!"V".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 18:
                        if(!"H".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 19:
                        if(!"L".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 20:
                        if(!"C".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 21:
                        if(!"K".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                    case 22:
                        if(!"E".equals(letra.toUpperCase())) throw new JugadorException();
                        break;
                }
            } catch(JugadorException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.NIF_INCORRECTO, "ERROR", JOptionPane.WARNING_MESSAGE);
                exist_excep = true;
            } catch(Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
                exist_excep = true;
            }
        } catch(JugadorException ex) {
            JOptionPane.showMessageDialog(this,"Error: " + ex.NIF_NO_INTRODUCIDO, "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        } catch(HeadlessException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        }
        
        /* Control de color no seleccionado */
        try {
            rojo = jRadioButtonRojo.isSelected();
            if(rojo == jRadioButtonAzul.isSelected()) throw new JugadorException();
        } catch(JugadorException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.COLOR_NO_SELECCIONADO, "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        }

        /* Control de dificultad no seleccionada */
        try {
            dificil = jRadioButtonAvanz.isSelected();
            if(dificil == jRadioButtonFacil.isSelected()) throw new JugadorException();
        } catch(JugadorException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.DIFICULTAD_NO_SELECCIONADA, "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
            exist_excep = true;
        }
        
        if(!exist_excep) {
            MazoDeCartas mazo = new MazoDeCartas();
            JugadorMaquina jugM = new JugadorMaquina(!rojo, mazo, dificil);
            
            try {
                FileInputStream fisRan = new FileInputStream("./src/paqueteinterfaz/ranking.ser");
                ObjectInputStream oisRan = new ObjectInputStream(fisRan);
                Ranking rank = (Ranking) oisRan.readObject();
                oisRan.close();
                fisRan.close();

                HashMap<String, JugadorUsuario> rankMap = rank.getRank();

                if(rankMap.containsKey(dni)) {
                    JugadorUsuario jug1 = rankMap.get(dni);
                    jug1.setRojo(rojo);
                    jug1.resetMano(mazo);
                    jug1.setRival(jugM);
                    jug1.setTablero(null);
                    rankMap.put(dni, jug1);
                    rank = new Ranking(rankMap);

                    FileOutputStream fosRan = new FileOutputStream("./src/paqueteinterfaz/ranking.ser");
                    ObjectOutputStream oosRan = new ObjectOutputStream(fosRan);
                    oosRan.writeObject(rank);
                    oosRan.close();
                    fosRan.close();
                    
                    Juego juego = new Juego(jug1, jug1.getRival());
                    juego.setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Error: No está registrado.", "ERROR", JOptionPane.WARNING_MESSAGE);    // Si no está en rankMap
                }
            } catch(EOFException ex) { 
                JOptionPane.showMessageDialog(this, "Error: No está registrado.", "ERROR", JOptionPane.WARNING_MESSAGE);  // Si pasa esto es porque no hay ningún dato en rank
            } catch(Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.toString(), "ERROR", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonNuevaActionPerformed

    /**
     * Este método no se usa.
     * @param evt No usar.
     */
    private void jRadioButtonRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonRojoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonRojoActionPerformed

    /**
     * Este método sucede cuando el usuario pulsa el botón ranking y abre una nueva ventana con el ranking de los jugadores.
     * @param evt 
     */
    private void jButtonRankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRankingActionPerformed
        RankingJug ran = new RankingJug();
        ran.setVisible(true);
        
        dispose();
    }//GEN-LAST:event_jButtonRankingActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inicio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupColor;
    private javax.swing.ButtonGroup buttonGroupDificil;
    private javax.swing.JButton jButtonEmpezada;
    private javax.swing.JButton jButtonNueva;
    private javax.swing.JButton jButtonRanking;
    private javax.swing.JButton jButtonRegistro;
    private javax.swing.JFormattedTextField jFormattedTextFieldDNI;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JRadioButton jRadioButtonAvanz;
    private javax.swing.JRadioButton jRadioButtonAzul;
    private javax.swing.JRadioButton jRadioButtonFacil;
    private javax.swing.JRadioButton jRadioButtonRojo;
    // End of variables declaration//GEN-END:variables
}
